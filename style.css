let web3;

// Set BSC mainnet parameters
const bscNetwork = {
  chainId: '0x38',
  chainName: 'Binance Smart Chain',
  nativeCurrency: {
    name: 'BNB',
    symbol: 'BNB',
    decimals: 18
  },
  rpcUrls: ['https://bsc-dataseed.binance.org/'],
  blockExplorerUrls: ['https://bscscan.com']
};

async function connectWallet() {
  if (window.ethereum) {
    try {
      // Request wallet connection
      await window.ethereum.request({ method: 'eth_requestAccounts' });
      web3 = new Web3(window.ethereum);

      // Switch to BSC if not already
      const currentChainId = await window.ethereum.request({ method: 'eth_chainId' });
      if (currentChainId !== bscNetwork.chainId) {
        try {
          await window.ethereum.request({
            method: 'wallet_addEthereumChain',
            params: [bscNetwork]
          });
        } catch (switchError) {
          console.error("Failed to switch network:", switchError);
          alert("Please approve Binance Smart Chain in your wallet.");
          return;
        }
      }

      // Get accounts and balance
      const accounts = await web3.eth.getAccounts();
      const wallet = accounts[0];
      const balanceWei = await web3.eth.getBalance(wallet);
      const balanceBNB = web3.utils.fromWei(balanceWei, 'ether');

      // Show results
      document.getElementById('connectedWallet').innerText = `Connected: ${wallet.slice(0, 6)}...${wallet.slice(-4)}`;
      document.getElementById('walletAddress').value = wallet;
      document.getElementById('walletBalance').value = `${parseFloat(balanceBNB).toFixed(4)} BNB`;
    } catch (err) {
      console.error("Wallet connect error:", err);
      alert("Connection failed. Check your wallet.");
    }
  } else {
    alert("No Web3 wallet found. Please install MetaMask or Trust Wallet.");
  }
}
